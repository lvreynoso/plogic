{"version":3,"sources":["../../source/models/user.js"],"names":["Schema","mongoose","UserSchema","createdAt","type","Date","updatedAt","password","String","required","select","username","email","posts","Types","ObjectId","ref","comments","pre","next","now","user","isModified","bcrypt","genSalt","err","salt","hash","methods","comparePassword","done","compare","isMatch","User","model"],"mappings":";;;;;;;AAGA;;AACA;;;;AAJA;AACA;AAIA,MAAMA,MAAM,GAAGC,kBAASD,MAAxB;AAEA,MAAME,UAAU,GAAG,IAAIF,MAAJ,CAAW;AAC1BG,EAAAA,SAAS,EAAE;AAAEC,IAAAA,IAAI,EAAEC;AAAR,GADe;AAE1BC,EAAAA,SAAS,EAAE;AAAEF,IAAAA,IAAI,EAAEC;AAAR,GAFe;AAG1BE,EAAAA,QAAQ,EAAE;AAAEH,IAAAA,IAAI,EAAEI,MAAR;AAAgBC,IAAAA,QAAQ,EAAE,IAA1B;AAAgCC,IAAAA,MAAM,EAAE;AAAxC,GAHgB;AAI1BC,EAAAA,QAAQ,EAAE;AAAEP,IAAAA,IAAI,EAAEI,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAJgB;AAK1BG,EAAAA,KAAK,EAAE;AAAER,IAAAA,IAAI,EAAEI;AAAR,GALmB;AAM1BK,EAAAA,KAAK,EAAE,CAAC;AAAET,IAAAA,IAAI,EAAEJ,MAAM,CAACc,KAAP,CAAaC,QAArB;AAA+BC,IAAAA,GAAG,EAAE;AAApC,GAAD,CANmB;AAO1BC,EAAAA,QAAQ,EAAE,CAAC;AAAEb,IAAAA,IAAI,EAAEJ,MAAM,CAACc,KAAP,CAAaC,QAArB;AAA+BC,IAAAA,GAAG,EAAE;AAApC,GAAD;AAPgB,CAAX,CAAnB;AAUAd,UAAU,CAACgB,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAe;AACpC;AACA,QAAMC,GAAG,GAAG,IAAIf,IAAJ,EAAZ;AACA,OAAKC,SAAL,GAAiBc,GAAjB;;AACA,MAAI,CAAC,KAAKjB,SAAV,EAAqB;AACnB,SAAKA,SAAL,GAAiBiB,GAAjB;AACD,GANmC,CAQlC;;;AACA,QAAMC,IAAI,GAAG,IAAb;;AACA,MAAI,CAACA,IAAI,CAACC,UAAL,CAAiB,UAAjB,CAAL,EAAkC;AAC9B,WAAOH,IAAI,EAAX;AACH;;AACDI,oBAAOC,OAAP,CAAe,EAAf,EAAmB,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC9BH,sBAAOI,IAAP,CAAYN,IAAI,CAACd,QAAjB,EAA2BmB,IAA3B,EAAiC,CAACD,GAAD,EAAME,IAAN,KAAe;AAC5CN,MAAAA,IAAI,CAACd,QAAL,GAAgBoB,IAAhB;AACAR,MAAAA,IAAI;AACP,KAHD;AAIH,GALD;AAMH,CAnBD;;AAqBAjB,UAAU,CAAC0B,OAAX,CAAmBC,eAAnB,GAAqC,UAAStB,QAAT,EAAmBuB,IAAnB,EAAyB;AAC1DP,oBAAOQ,OAAP,CAAexB,QAAf,EAAyB,KAAKA,QAA9B,EAAwC,CAACkB,GAAD,EAAMO,OAAN,KAAkB;AACtDF,IAAAA,IAAI,CAACL,GAAD,EAAMO,OAAN,CAAJ;AACH,GAFD;AAGH,CAJD;;AAMA,MAAMC,IAAI,GAAGhC,kBAASiC,KAAT,CAAe,MAAf,EAAuBhC,UAAvB,CAAb;;eACe+B,I","sourcesContent":["// user.js\n// our User model\n\nimport mongoose from 'mongoose'\nimport bcrypt from 'bcryptjs'\nconst Schema = mongoose.Schema;\n\nconst UserSchema = new Schema({\n    createdAt: { type: Date },\n    updatedAt: { type: Date },\n    password: { type: String, required: true, select: false },\n    username: { type: String, required: true},\n    email: { type: String },\n    posts: [{ type: Schema.Types.ObjectId, ref: \"Post\" }],\n    comments: [{ type: Schema.Types.ObjectId, ref: \"Comment\" }]\n})\n\nUserSchema.pre(\"save\", function(next) {\n  // SET createdAt AND updatedAt\n  const now = new Date();\n  this.updatedAt = now;\n  if (!this.createdAt) {\n    this.createdAt = now;\n  }\n\n    // encrypt password\n    const user = this;\n    if (!user.isModified(`password`)) {\n        return next();\n    }\n    bcrypt.genSalt(10, (err, salt) => {\n        bcrypt.hash(user.password, salt, (err, hash) => {\n            user.password = hash;\n            next();\n        })\n    })\n});\n\nUserSchema.methods.comparePassword = function(password, done) {\n    bcrypt.compare(password, this.password, (err, isMatch) => {\n        done(err, isMatch);\n    });\n};\n\nconst User = mongoose.model('User', UserSchema);\nexport default User;\n"],"file":"user.js"}